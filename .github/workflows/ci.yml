name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write  # For security scanning results
  actions: read  # Required for workflow run information

env:
  GO_VERSION: '1.23.4'
  POSTGRES_VERSION: '16'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

      - name: Check go mod tidy
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: eph_test
          POSTGRES_PASSWORD: eph_test
          POSTGRES_DB: eph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          # Caching is automatic in v5

      - name: Run database migrations
        env:
          DATABASE_URL: postgres://eph_test:eph_test@localhost:5432/eph_test?sslmode=disable
        run: |
          go run ./cmd/ephd migrate up
          go run ./cmd/ephd migrate status

      - name: Run tests
        env:
          DATABASE_URL: postgres://eph_test:eph_test@localhost:5432/eph_test?sslmode=disable
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}  # Required for v4

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binaries
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          # Build ephd daemon
          output_name="ephd-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            output_name="${output_name}.exe"
          fi
          go build -v -o "./bin/${output_name}" ./cmd/ephd

          # Build eph CLI
          output_name="eph-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            output_name="${output_name}.exe"
          fi
          go build -v -o "./bin/${output_name}" ./cmd/eph

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: bin/
          retention-days: 7

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: eph_test
          POSTGRES_PASSWORD: eph_test
          POSTGRES_DB: eph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download ephd binary
        uses: actions/download-artifact@v4
        with:
          name: binaries-${{ runner.os }}-${{ env.ARCH }}
          path: bin/

      - name: Make binaries executable
        run: chmod +x bin/*

      - name: Run database migrations
        env:
          DATABASE_URL: postgres://eph_test:eph_test@localhost:5432/eph_test?sslmode=disable
        run: |
          ./bin/ephd-linux-amd64 migrate up

      - name: Start ephd daemon
        env:
          DATABASE_URL: postgres://eph_test:eph_test@localhost:5432/eph_test?sslmode=disable
          EPH_ENV: test
          LOG_LEVEL: debug
          SERVER_ADDR: :8080
        run: |
          ./bin/ephd-linux-amd64 serve &
          echo $! > ephd.pid

          # Wait for server to be ready
          for i in {1..30}; do
            if curl -f http://localhost:8080/health >/dev/null 2>&1; then
              echo "‚úÖ Server is ready!"
              break
            fi
            echo "‚è≥ Waiting for server..."
            sleep 1
          done

      - name: Run integration tests
        run: |
          # Test health endpoint
          curl -f http://localhost:8080/health

      - name: Test eph CLI
        env:
          EPH_API_URL: http://localhost:8080
        run: |
          # Test CLI version command
          ./bin/eph-linux-amd64 version

          # Test CLI without auth (should fail gracefully)
          ./bin/eph-linux-amd64 list || true

      - name: Stop ephd daemon
        if: always()
        run: |
          if [ -f ephd.pid ]; then
            kill $(cat ephd.pid) || true
          fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif ./...'

      - name: Upload gosec results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'gosec-results.sarif'

  deploy:
    name: Deploy (Placeholder)
    runs-on: ubuntu-latest
    needs: [lint, test, build, integration-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deploy notification
        run: |
          echo "üöÄ This is where we would deploy Eph!"
          echo "üì¶ Version: ${{ github.sha }}"
          echo ""
          echo "Future deployment steps:"
          echo "1. Build and push Docker images"
          echo "2. Deploy to production cluster"
          echo "3. Run smoke tests"
