name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write  # For security scanning results
  actions: read  # Required for workflow run information

env:
  GO_VERSION: '1.24.3'
  POSTGRES_VERSION: '16'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.4
          args: --timeout=5m

      - name: Check go mod tidy
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: eph_test
          POSTGRES_PASSWORD: eph_test
          POSTGRES_DB: eph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          # Caching is automatic in v5

      - name: Skip database migrations (not implemented yet)
        run: |
          echo "‚ö†Ô∏è  Database migrations will be added once database functionality is implemented"

      - name: Install test tools
        run: |
          # Install gotestsum for better test output and JUnit XML generation
          go install gotest.tools/gotestsum@latest

      - name: Run tests with enhanced output
        run: |
          # Use gotestsum for beautiful test output + coverage + JUnit XML
          gotestsum \
            --format=pkgname-and-test-fails \
            --junitfile=unit-tests.xml \
            --jsonfile=unit-tests.json \
            -- \
            -race \
            -coverprofile=coverage.txt \
            -covermode=atomic \
            -coverpkg=./... \
            -tags='!integration' \
            ./...

      - name: Generate coverage report summary
        if: github.event_name == 'pull_request'
        run: |
          echo "üìä Coverage Report Summary:"
          go tool cover -func=coverage.txt | tail -1


      - name: Test Summary Report
        uses: test-summary/action@v2
        if: always()
        with:
          paths: "unit-tests.xml"
          show: "fail, skip"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            unit-tests.xml
            unit-tests.json
            coverage.txt
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          flags: unittests
          name: eph-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binaries
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          # Build ephd daemon
          output_name="ephd-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            output_name="${output_name}.exe"
          fi
          go build -v -o "./bin/${output_name}" ./cmd/ephd

          # Build eph CLI
          output_name="eph-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            output_name="${output_name}.exe"
          fi
          go build -v -o "./bin/${output_name}" ./cmd/eph

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: bin/
          retention-days: 7

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: eph_test
          POSTGRES_PASSWORD: eph_test
          POSTGRES_DB: eph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download ephd binary
        uses: actions/download-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: bin/

      - name: Make binaries executable
        run: chmod +x bin/*

      - name: Skip database migrations (not implemented yet)
        run: |
          echo "‚ö†Ô∏è  Database migrations will be added once database functionality is implemented"

      - name: Install test tools
        run: |
          go install gotest.tools/gotestsum@latest

      - name: Start ephd server
        run: |
          ./bin/ephd-${{ matrix.goos }}-${{ matrix.goarch }} &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          trap "kill $SERVER_PID" EXIT
          echo "Waiting for server to become healthy..."
          max_attempts=30
          attempt_num=0
          until curl --fail --silent http://localhost:8080/health > /dev/null 2>&1; do
            attempt_num=$((attempt_num+1))
            if (( attempt_num == max_attempts )); then
              echo "Server did not become healthy after $max_attempts attempts."
              exit 1
            fi
            echo "Health check attempt $attempt_num/$max_attempts failed. Retrying in 5 seconds..."
            sleep 5
          done
          echo "Server is healthy."

      - name: Run integration tests with enhanced output
        run: |
          # Run integration tests with gotestsum
          gotestsum \
            --format=testname \
            --junitfile=integration-tests.xml \
            --jsonfile=integration-tests.json \
            -- \
            -race \
            -coverprofile=integration-coverage.out \
            -covermode=atomic \
            -tags=integration \
            ./internal/server/...

      - name: Integration Test Summary
        uses: test-summary/action@v2
        if: always()
        with:
          paths: "integration-tests.xml"
          show: "fail, skip"

      - name: Test eph CLI
        run: |
          # Test CLI version command
          ./bin/eph-${{ matrix.goos }}-${{ matrix.goarch }} version

          # Test CLI help command
          ./bin/eph-${{ matrix.goos }}-${{ matrix.goarch }} --help

          echo "‚úÖ eph CLI tests passed"

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            integration-tests.xml
            integration-tests.json
            integration-coverage.out
          retention-days: 7

      - name: Upload integration coverage to Codecov
        if: always() && hashFiles('integration-coverage.out') != ''
        uses: codecov/codecov-action@v4
        with:
          file: ./integration-coverage.out
          flags: integration
          name: eph-integration-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Install and run gosec security scanner
        run: |
          # Install gosec using the Go version we already have (1.24.3)
          echo "üì¶ Installing gosec..."

          # Try go install first, fall back to curl method if it fails
          if ! go install github.com/securego/gosec/v2/cmd/gosec@latest; then
            echo "‚ö†Ô∏è go install failed, trying curl method..."
            curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest
            export PATH=$PATH:$(go env GOPATH)/bin
          fi

          echo "üîç Running gosec security scanner..."
          echo "================================================="

          # Run gosec with table format for readable output
          if gosec -fmt table -verbose -exclude-generated ./...; then
            echo "‚úÖ gosec scan completed successfully - no security issues found"
            scan_passed=true
          else
            echo "‚ùå gosec found security issues (shown in table above)"
            scan_passed=false
          fi

          echo ""
          echo "================================================="
          echo "üí° To reproduce locally:"
          echo "   go install github.com/securego/gosec/v2/cmd/gosec@latest"
          echo "   # OR: curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s latest"
          echo "   gosec -fmt table -verbose ./..."
          echo "================================================="

          # Generate SARIF for GitHub Security dashboard
          echo "üì§ Generating SARIF report for GitHub Security dashboard..."
          gosec -fmt sarif -out gosec-results.sarif -exclude-generated ./... || true

          # Exit with appropriate code
          if [ "$scan_passed" = "false" ]; then
            echo "üö´ CI failing due to security issues found above"
            exit 1
          else
            echo "‚úÖ All security checks passed!"
          fi

      - name: Upload gosec results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'gosec-results.sarif'

  deploy:
    name: Deploy (Placeholder)
    runs-on: ubuntu-latest
    needs: [lint, test, build, integration-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deploy notification
        run: |
          echo "üöÄ This is where we would deploy Eph!"
          echo "üì¶ Version: ${{ github.sha }}"
          echo ""
          echo "Future deployment steps:"
          echo "1. Build and push Docker images"
          echo "2. Deploy to production cluster"
          echo "3. Run smoke tests"
